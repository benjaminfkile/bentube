{"version":3,"sources":["Decoder/Decoder.js","MediaPlayer/MediaPlayer.js","Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Decoder","_duration","_progress","_serverURL","nextCallback","props","next","durationCallback","duration","progressCallback","progress","listenForAudio","audio","document","getElementById","currentTime","this","_interval","setInterval","clearInterval","className","videoId","id","src","onEnded","controls","autoPlay","Component","MediaPlayer","decoderNext","state","queu","idx","decoderDuration","setState","Date","toISOString","substr","decoderProgress","playTrack","args","nowPlaying","pause","stop","shuffle","random","Math","floor","length","previous","listen4DB","response","waiting4DB","stopListening4DB","interval1","buildQueu","temp","i","items","date","snippet","publishedAt","split","push","title","description","thumbnail","thumbnails","high","url","published","alt","height","width","dangerouslySetInnerHTML","__html","onClick","map","videos","tabIndex","key","Search","handleSubmit","value","getVideos","maxResults","keyPress","e","keyCode","formatQueryParams","params","Object","keys","encodeURIComponent","join","query","requests","error","apiKey","q","part","queryString","searchURL","fetch","then","ok","json","Error","statusText","responseJson","catch","err","console","log","message","baseURL","bind","type","onKeyDown","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dbcb64f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Decoder extends Component {\n\n  _duration = 0;\n  _progress = 0;\n  _interval\n  // _serverURL = 'http://localhost:8000/downloadmp3?url='\n  _serverURL = 'https://frozen-thicket-30265.herokuapp.com/downloadmp3?url='\n\n  componentDidMount() {\n    this._interval = setInterval(this.listenForAudio, 1000)\n  }\n\n  componentWillUnmount(){\n    clearInterval(this._interval)\n  }\n\n  nextCallback = () => {\n    this.props.next()\n  }\n\n  durationCallback = () => {\n    this.props.duration(this._duration)\n  }\n  \n  progressCallback = () =>{\n    this.props.progress(this._progress)\n  }\n\n  listenForAudio = () =>{\n    var audio = document.getElementById(\"audio\")\n    if(audio){\n      this._duration = audio.duration\n      this._progress = audio.currentTime\n      this.durationCallback()\n      this.progressCallback()\n    }else{\n      this._duration = 0\n      this._progress = 0\n    }\n\n  }\n  render() {\n    \n    return (\n      <div className=\"Media_Player\">\n        {this.props.videoId && <audio id=\"audio\" src={this._serverURL + this.props.videoId} onEnded={this.nextCallback} controls autoPlay />}\n      </div>\n    );\n  }\n}\n\nexport default Decoder;","import React, { Component } from 'react'\nimport Decoder from '../Decoder/Decoder';\n// import Bars from './Bars'\nimport '../MediaPlayer/MediaPlayer.css'\n\nclass MediaPlayer extends Component {\n\n    _interval\n\n    constructor() {\n        super();\n        this.state = {\n            nowPlaying: null,\n            queu: null,\n            waiting4DB: true,\n            idx: 0,\n            interval1: 1000,\n            pause: false,\n            next: false,\n            duration: null,\n            progress: null,\n            shuffle: false,\n        }\n    }\n\n    componentDidMount() {\n        this.listen4DB()\n        // this._interval = setInterval(this.listenForAudio, 1000)\n    }\n\n    componentWillUnmount(){\n        clearInterval(this._interval)\n      }\n\n    decoderNext = () => {\n        this.next(this.state.queu[this.state.idx])\n    }\n\n    decoderDuration = (duration) => {\n        if (duration) {\n            this.setState({ duration: new Date(duration * 1000).toISOString().substr(12, 7) })\n        }\n    }\n\n    decoderProgress = (progress) => {\n        if (progress) {\n            this.setState({ progress: new Date(progress * 1000).toISOString().substr(12, 7), next: true })\n        }\n    }\n\n    playTrack = (args) => {\n\n        this.setState({ nowPlaying: null })\n\n        if (args) {\n            this.setState({ nowPlaying: args.id, idx: args.idx, pause: true })\n\n        } else {\n            this.playTrack(this.state.queu[0])\n        }\n    }\n\n    stop = () => {\n        this.setState({ pause: false, nowPlaying: null })\n    }\n\n    next = (args) => {\n\n        this.setState({ next: false, pause: true })\n\n        if (!this.state.shuffle) {\n            if (args.idx < this.state.queu.length - 1) {\n                this.setState({ idx: this.state.idx + 1, nowPlaying: this.state.queu[this.state.idx + 1].id })\n            } else {\n                this.setState({ idx: 0, nowPlaying: this.state.queu[0].id })\n            }\n        } else {\n            let random = Math.floor(Math.random() * this.state.queu.length)\n\n            this.setState({ idx: random, nowPlaying: this.state.queu[random].id })\n        }\n    }\n\n    previous = (args) => {\n        this.setState({ pause: true })\n        if (args.idx > 0) {\n            this.setState({ idx: this.state.idx - 1, nowPlaying: this.state.queu[this.state.idx - 1].id })\n        } else {\n            this.setState({ idx: this.state.queu.length - 1, nowPlaying: this.state.queu[this.state.queu.length - 1].id })\n        }\n    }\n\n    shuffle = () => {\n        if (!this.state.shuffle) {\n            this.setState({ shuffle: true })\n        }\n        else {\n            this.setState({ shuffle: false })\n        }\n    }\n\n    // listenForAudio = () =>{\n    //     var audio = document.getElementById(\"audio\")\n    //     if(audio.src !== 'http://localhost:8000/downloadmp3?url=null'){\n    //         this.setState({pause: true, next: true})\n    //     }\n    \n    //   }\n\n    listen4DB = () => {\n        if (this.props.response) {\n            this.setState({ waiting4DB: false })\n            this.stopListening4DB()\n        }\n    }\n\n    stopListening4DB = () => {\n        clearInterval(this.state.interval1);\n        this.buildQueu()\n    }\n\n    buildQueu = () => {\n        let temp = []\n        let idx = -1;\n        if (this.props.response) {\n            for (let i = 0; i < this.props.response.items.length; i++) {\n                if (this.props.response.items[i].id.videoId) {\n                    idx++\n                    let date = this.props.response.items[i].snippet.publishedAt\n                    date = date.split('T')\n                    temp.push(\n                        {\n                            title: this.props.response.items[i].snippet.title,\n                            description: this.props.response.items[i].snippet.description,\n                            thumbnail: this.props.response.items[i].snippet.thumbnails.high.url,\n                            id: this.props.response.items[i].id.videoId,\n                            published: date[0],\n                            idx: idx\n                        })\n                }\n            }\n            this.setState({ queu: temp })\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"Results\">\n                {this.state.queu && <div className=\"Controls\">\n                    <section>\n                        <img src={this.state.queu[this.state.idx].thumbnail} alt=\"oops\" height=\"85\" width=\"115\"></img>\n                        <h1 dangerouslySetInnerHTML={{ __html: this.state.queu[this.state.idx].title }}></h1>\n                    </section>\n                    <div className=\"Buttons\">\n                        <img id=\"Prev_Btn\" src=\"./res/prev.png\" alt=\"=&lt;&lt;\" onClick={() => this.previous(this.state.queu[this.state.idx])}></img>\n                        {!this.state.pause &&\n                            <img id=\"Play_Btn\" src=\"./res/play.png\" alt=\"&gt;\" onClick={() => this.playTrack()}></img>}\n                        {this.state.pause && <img id=\"Pause_Btn\" src=\"./res/pause.png\" alt=\"||\" onClick={() => this.stop()}></img>}\n                        {/* {this.state.next && <img id=\"Next_Btn\" src=\"./res/next.png\" alt=\"&gt;&gt;\" onClick={() => this.next(this.state.queu[this.state.idx])}></img>} */}\n                        <img id=\"Next_Btn\" src=\"./res/next.png\" alt=\"&gt;&gt;\" onClick={() => this.next(this.state.queu[this.state.idx])}></img>\n                        {this.state.progress && this.state.duration && <p>{this.state.progress}/{this.state.duration}</p>}\n                        {!this.state.shuffle && <img id=\"Shuffle_Btn\" src=\"./res/shuffle.png\" alt=\"shuflle\" onClick={() => this.shuffle()}></img>}\n                        {this.state.shuffle && <img id=\"No_Shuffle_Btn\" src=\"./res/no-shuffle.png\" alt=\"shuflle\" onClick={() => this.shuffle()}></img>}\n                    </div>\n                    {/* {this.state.pause && <Bars />} */}\n                </div>}\n                {this.state.queu && <div className=\"List\">\n                    <ul>\n                        {this.state.queu.map(videos =>\n                            <div className=\"Item\" tabIndex={videos.idx} key={Math.random() * Math.random()} onClick={() => this.playTrack(videos)} >\n                                <div className=\"Image\">\n                                    <img src={videos.thumbnail} alt=\"Smiley face\" height=\"90\" width=\"120\"></img>\n                                </div>\n                                <div className=\"Info\">\n                                    <li dangerouslySetInnerHTML={{ __html: videos.title }}></li>\n                                    <p>{videos.published}</p>\n                                </div>\n                            </div>)}\n                    </ul>\n                </div>}\n                <Decoder\n                    videoId={this.state.nowPlaying}\n                    next={this.decoderNext}\n                    duration={this.decoderDuration}\n                    progress={this.decoderProgress}\n                />\n            </div>\n        )\n    }\n}\n\nexport default MediaPlayer","import React, { Component } from 'react'\nimport MediaPlayer from '../MediaPlayer/MediaPlayer'\nimport '../Search/Search.css'\n// import DummyStore from './DummyStore'\n\nclass Search extends Component {\n    constructor() {\n        super();\n        this.state = {\n            //this key is restricted due to a scumbag that kept stealing it so you will have to come up with your own to get it working\n            apiKey: 'AIzaSyApPh6UB8gS6Y8NQkYDYs5BeHDpmDmFvCI',\n            searchURL: 'https://www.googleapis.com/youtube/v3/search',\n            baseURL: 'https://www.youtube.com/watch?v=',\n            response: null,\n            value: '',\n            maxResults: 50,\n            requests: 0,\n            error: false\n        }\n        this.keyPress = this.keyPress.bind(this);\n    }\n    componentDidMount() {\n        this.getVideos('new music', 50)\n        // this.setState({ response: DummyStore })\n    }\n\n    handleSubmit = () => {\n        this.setState({response: null})\n        let value = document.getElementById(\"text\").value\n        if (value !== \"Search for Music, News, Lyrics...\") {\n            this.getVideos(value, this.state.maxResults)\n            document.getElementById(\"text\").value = \"\"\n        }\n\n    }\n\n    keyPress = (e) => {\n        let value = document.getElementById(\"text\").value\n        if (value === \"Search for Music, News, Lyrics...\") {\n            document.getElementById(\"text\").value = \"\"\n        }\n        if (e.keyCode === 13) {\n            this.handleSubmit()\n        }\n    }\n\n    formatQueryParams = (params) => {\n        const queryItems = Object.keys(params)\n            .map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n        return queryItems.join('&')\n    }\n\n\n    getVideos = (query, maxResults) => {\n        this.setState({ requests: this.state.requests + 1 })\n        this.setState({ error: false })\n        const params = {\n            key: this.state.apiKey,\n            q: query,\n            part: 'snippet',\n            maxResults\n        };\n        const queryString = this.formatQueryParams(params)\n        const url = this.state.searchURL + '?' + queryString;\n\n        fetch(url)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n                throw new Error(response.statusText);\n            })\n            .then(responseJson => this.setState({ response: responseJson }))\n            .catch(err => {\n                console.log(err.message)\n                this.setState({ error: true })\n            });\n    }\n\n    render() {\n\n        return (\n            <div className=\"Search\">\n                <form className=\"Search_Form\">\n                    <textarea id=\"text\" type=\"text\" onKeyDown={this.keyPress}/>\n                    <img id=\"Go_Btn\" src=\"./res/go.png\" alt=\"=&gt;\" onClick={() => this.handleSubmit()}></img>\n                </form>\n                {this.state.error &&\n                    <div className=\"Error\">\n                        <h1>\n                            Sorry, something went wrong :(\n                        </h1>\n                    </div>}\n\n                {!this.state.error &&\n                    <MediaPlayer key={Math.random()}\n                        response={this.state.response}\n                    />}\n            </div>\n        )\n    }\n}\n\nexport default Search","import React, { Component } from 'react';\nimport Search from './Search/Search'\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Search />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}